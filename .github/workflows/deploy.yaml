name: Build images e Deploy

on:
  release:
    types: [published]

env:
  # Use docker.io for Docker Hub if empty
  REGISTRY: ghcr.io
  # github.repository as <account>/<repo>
  IMAGE_WEB: ildug/cert-auth-app-web
  IMAGE_API: ildug/cert-auth-app-api

jobs:
  containerize_app:
    name: APP - Build, tag and push to Github Container Registry with Node ${{ matrix.node-version }} 
    runs-on: ubuntu-latest
    if: github.ref_type == 'tag'
    strategy:
      matrix:
        node-version: [18.x]
        # node-version: [14.x, 16.x, 18.x]

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}

      - name: Install Packages
        run: |
          cd ./app
          pwd
          FONTAWESOME_NPM_AUTH_TOKEN=${{ secrets.FONTAWESOME_NPM_AUTH_TOKEN }} npm ci

      - name: Build Angular App
        run: |
          cd ./app
          pwd
          npm run build 

      - name: Get Tags
        id: tag
        uses: ildug/get-tag-action@v1

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      # - name: Set up Docker Buildx
      #   uses: docker/setup-buildx-action@v2

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: APP - Build and push image
        run: |
          docker buildx create --driver docker-container --use
          docker buildx build . \
                --file Dockerfile.app-prod \
                --tag ${{ env.REGISTRY }}/${{ env.IMAGE_WEB }}:latest \
                --tag ${{ env.REGISTRY }}/${{ env.IMAGE_WEB }}:${{ steps.tag.outputs.version }} \
                --platform linux/amd64 \
                --push

  containerize_api:
    name: API - Build, tag and push to Github Container Registry
    if: github.ref_type == 'tag'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Get Tags
        id: tag
        uses: ildug/get-tag-action@v1

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      # - name: Set up Docker Buildx
      #   uses: docker/setup-buildx-action@v2

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: API - Build and push image
        run: |
          docker buildx create --driver docker-container --use
          docker buildx build . \
                --file Dockerfile.api-prod \
                --tag ${{ env.REGISTRY }}/${{ env.IMAGE_API }}:latest \
                --tag ${{ env.REGISTRY }}/${{ env.IMAGE_API }}:${{ steps.tag.outputs.version }} \
                --platform linux/amd64 \
                --push


